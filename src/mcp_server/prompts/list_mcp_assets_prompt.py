"""List MCP assets prompt implementation."""


async def list_mcp_assets() -> str:
    """Return a comprehensive list of all MCP server capabilities."""
    
    return """# üöÄ Quick-Data MCP Server Assets

## üìù Prompts
Interactive conversation starters and analysis guides:

‚Ä¢ **dataset_first_look** (dataset_name) - Initial exploration guide for any new dataset
‚Ä¢ **segmentation_workshop** (dataset_name) - Plan segmentation strategy based on available columns
‚Ä¢ **data_quality_assessment** (dataset_name) - Systematic data quality assessment workflow
‚Ä¢ **correlation_investigation** (dataset_name) - Guide correlation analysis workflow
‚Ä¢ **pattern_discovery_session** (dataset_name) - Open-ended pattern mining conversation
‚Ä¢ **insight_generation_workshop** (dataset_name, business_context) - Generate business insights from data
‚Ä¢ **dashboard_design_consultation** (dataset_name, audience) - Plan dashboards for specific audiences
‚Ä¢ **find_datasources** (directory_path) - Discover available data files and present load options

## üîß Tools
Data analysis and manipulation functions:

### Dataset Management
‚Ä¢ **load_dataset** (file_path, dataset_name, sample_size) - Load JSON/CSV datasets with automatic schema discovery
‚Ä¢ **list_loaded_datasets** () - Show all datasets currently in memory
‚Ä¢ **clear_dataset** (dataset_name) - Remove specific dataset from memory
‚Ä¢ **clear_all_datasets** () - Clear all datasets from memory
‚Ä¢ **get_dataset_info** (dataset_name) - Get basic info about loaded dataset

### Analysis Tools
‚Ä¢ **segment_by_column** (dataset_name, column_name, method, top_n) - Generic segmentation on categorical columns
‚Ä¢ **find_correlations** (dataset_name, columns, threshold) - Find correlations between numerical columns
‚Ä¢ **analyze_distributions** (dataset_name, column_name) - Analyze distribution of any column
‚Ä¢ **detect_outliers** (dataset_name, columns, method) - Detect outliers using configurable methods
‚Ä¢ **time_series_analysis** (dataset_name, date_column, value_column, frequency) - Temporal analysis for date data
‚Ä¢ **suggest_analysis** (dataset_name) - AI recommendations based on data characteristics

### Visualization
‚Ä¢ **create_chart** (dataset_name, chart_type, x_column, y_column, groupby_column, title, save_path) - Create charts that adapt to any dataset
‚Ä¢ **generate_dashboard** (dataset_name, chart_configs) - Generate multi-chart dashboards

### Advanced Analytics
‚Ä¢ **validate_data_quality** (dataset_name) - Comprehensive data quality assessment
‚Ä¢ **compare_datasets** (dataset_a, dataset_b, common_columns) - Compare multiple datasets
‚Ä¢ **merge_datasets** (dataset_configs, join_strategy) - Join datasets on common keys
‚Ä¢ **calculate_feature_importance** (dataset_name, target_column, feature_columns) - Feature importance for predictive modeling
‚Ä¢ **memory_optimization_report** (dataset_name) - Analyze memory usage and suggest optimizations
‚Ä¢ **export_insights** (dataset_name, format, include_charts) - Export analysis in multiple formats
‚Ä¢ **execute_custom_analytics_code** (dataset_name, python_code) - Execute custom Python code against loaded datasets

### Resource Mirror Tools
Tool versions of resources for tool-only MCP clients:
‚Ä¢ **resource_datasets_loaded** () - Tool mirror of datasets://loaded resource
‚Ä¢ **resource_datasets_schema** (dataset_name) - Tool mirror of datasets schema resource
‚Ä¢ **resource_datasets_summary** (dataset_name) - Tool mirror of datasets summary resource
‚Ä¢ **resource_datasets_sample** (dataset_name) - Tool mirror of datasets sample resource
‚Ä¢ **resource_analytics_current_dataset** () - Tool mirror of current dataset resource
‚Ä¢ **resource_analytics_available_analyses** () - Tool mirror of available analyses resource
‚Ä¢ **resource_analytics_column_types** () - Tool mirror of column types resource
‚Ä¢ **resource_analytics_suggested_insights** () - Tool mirror of suggested insights resource
‚Ä¢ **resource_analytics_memory_usage** () - Tool mirror of memory usage resource
‚Ä¢ **resource_config_server** () - Tool mirror of server config resource
‚Ä¢ **resource_users_profile** (user_id) - Tool mirror of user profile resource
‚Ä¢ **resource_system_status** () - Tool mirror of system status resource

## üìä Resources
Dynamic data context and system information:

### Dataset Resources
‚Ä¢ **datasets://loaded** - List of all currently loaded datasets with basic info
‚Ä¢ **datasets://{dataset_name}/schema** - Dynamic schema for any loaded dataset
‚Ä¢ **datasets://{dataset_name}/summary** - Statistical summary (pandas.describe() equivalent)
‚Ä¢ **datasets://{dataset_name}/sample** - Sample rows for data preview

### Analytics Resources
‚Ä¢ **analytics://current_dataset** - Currently active dataset name and basic stats
‚Ä¢ **analytics://available_analyses** - List of applicable analysis types for current data
‚Ä¢ **analytics://column_types** - Column classification (categorical, numerical, temporal, text)
‚Ä¢ **analytics://suggested_insights** - AI-generated analysis recommendations
‚Ä¢ **analytics://memory_usage** - Monitor memory usage of loaded datasets

### System Resources
‚Ä¢ **config://server** - Server configuration information
‚Ä¢ **users://{user_id}/profile** - User profile information by ID
‚Ä¢ **system://status** - System status and health information

---

**üéØ Quick Start:**
1. Use `find_datasources()` to discover available data files
2. Load data with `load_dataset(file_path, dataset_name)`
3. Start exploring with `dataset_first_look(dataset_name)`
4. Use specific analysis tools or `execute_custom_analytics_code()` for custom analysis

**üí° Pro Tips:**
‚Ä¢ Use prompts for guided workflows and analysis planning
‚Ä¢ Tools provide direct functionality and data manipulation
‚Ä¢ Resources offer real-time context and metadata about your data
‚Ä¢ All functions work generically across any dataset structure
"""
